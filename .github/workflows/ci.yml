name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  code-format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Run clang-format (check only)
        run: |
          find . -name '*.cpp' -o -name '*.h' | xargs clang-format -i
          git diff --exit-code || (echo "Code not formatted!" && exit 1)

  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [g++, clang++]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          if [[ "${{ matrix.compiler }}" == "clang++" ]]; then
            sudo apt-get install -y cmake clang lldb lld
          else
            sudo apt-get install -y cmake g++ valgrind
          fi

      - name: Set compiler
        run: |
          echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV

      - name: Configure with CMake
        run: |
          cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}

      - name: Build project
        run: cmake --build build -j$(nproc)

      - name: Run unit tests
        run: cd build && ctest --output-on-failure

  valgrind-check:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ valgrind

      - name: Configure and build
        run: |
          cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Debug \
                -DCMAKE_CXX_COMPILER=g++
          cmake --build build -j$(nproc)

      - name: Run memory check
        run: cd build && valgrind --error-exitcode=1 ./launch
